1. Which is the most succinct query to return all documents from the sample_training.
inspections collection where the inspection date is either "Feb 20 2015", or "Feb 21 2015" 
and the company is not part of the "Cigarette Retail Dealer - 127" sector?

  db.inspections.find(
    { "$or": [ { "date": "Feb 20 2015" },
               { "date": "Feb 21 2015" } ],
      "sector": { "$ne": "Cigarette Retail Dealer - 127" }}).pretty()
  This is correct.
  
  This query accounts for both dates that we are looking for and excludes all documents where the sector is "Cigarette Retail Dealer - 127" by using the $ne not equal comparison operator.
  
  db.inspections.find(
    { "$or": [ { "date": "Feb 20 2015" },
               { "date": "Feb 21 2015" }],
      "$not": { "sector": "Cigarette Retail Dealer - 127" }}).pretty()
  This is incorrect.
  
  While this query looks for the right dates and correctly uses the $or operator, 
  it is incorrectly using the $not logic operator. $not negates a logical expression, 
  and in this case, will result in an error.
  
  db.inspections.find(
    { "$and": [
        { "$or": [
                   { "date": "Feb 20 2015" },
                   { "date": "Feb 21 2015" } ] },
        {"sector": { "$ne":"Cigarette Retail Dealer - 127" }}]
    }).pretty()
  This is incorrect.
  
  This statement will return the correct documents, but it is unnecessarily using the $and operator 
  and thus can not be the best way to get the required documents.


2. How many companies in the sample_training.companies dataset were

  either founded in 2004
  
  [and] either have the social category_code [or] web category_code,
  [or] were founded in the month of October
  
  [and] also either have the social category_code [or] web category_code?

  db.companies.find({"$or": [{"$and": [{"founded_year":2004},{"$or":[{"category_code":"social"},{"category_code":"web"}]}]},
  {"$and": [{"founded_month":10},{"$or":[{"category_code":"social"},{"category_code":"web"}]}]}]}).count();


3. What is the name of the listing in the sample_airbnb.listingsAndReviews dataset 
that accommodates more than 6 people and has exactly 50 reviews?

  db.listingsAndReviews.find({ "reviews": { "$size":50 },
                             "accommodates": { "$gt":6 }})


4. Which of the following commands will return the name and founding year for the 5 oldest companies 
in the sample_training.companies collection?

db.companies.find({"founded_year": {"$ne":null}},{"name":1,"founded_year":1}).sort({"founded_year":1}).limit(5);
db.companies.find({"founded_year": {"$ne":null}},{"name":1,"founded_year":1}).limit(5).sort({"founded_year":1});
都可以，sort在limit前先执行，无论MQL顺序


5. Gving index { name: 1, emails: 1 }
When the following document is inserted, how many index entries will be created?
{
  "name": "Beatrice McBride",
  "age": 26,
  "emails": [
      "puovvid@wamaw.kp",
      "todujufo@zoehed.mh",
      "fakmir@cebfirvot.pm"
  ]
}

answer: 3
"Beatrice McBride", "puovvid@wamaw.kp"
"Beatrice McBride", "todujufo@zoehed.mh"
"Beatrice McBride", "fakmir@cebfirvot.pm"

6. Using the wildcardProjection flag with Wildcard Indexes, we can:

Correct Answers:

Using the wildcardProjection flag with Wildcard Indexes, we can:

include a set of fields in the Wildcard Index.

We can include a set of fields in our Wildcard Index using the syntax { wildcardProjection: { <field.path>: 1 } }.
exclude a set of fields from the Wildcard Index.

We can exclude a set of fields from our Wildcard Index using the syntax { wildcardProjection: { <field.path>: 0 } }.
Incorrect Answer:

Using the wildcardProjection flag with Wildcard Indexes, we can specify a set of fields 
in the Wildcard Index to project with $project. This is not the purpose of the wildcardProjection flag.


7. Which of the following are good reasons to use a Wildcard Index?
1) Correct Options

The query pattern on documents of a collection is unpredictable.

The wildcard index creates an index on every field in a document or subdocument, 
which facilitates an unpredictable query pattern.

An application consistently queries against document fields that use the Attribute Pattern.

The wildcard index can create an index on every field in a subdocument, 
which eliminates the need for an array of subdocuments when implementing the Attribute Pattern.

2) Incorrect Option

A collection has documents with many different fields.

This is not enough to justify using a Wildcard Index. 
If a collection has many different fields, and you wanted to support queries on all those fields, 
then the Wildcard Index is a viable option. 
However, simply having many different fields is not a good reason to use the Wildcard Index.

8. In this lab you're going to determine which queries are able to successfully 
use a given index for both filtering and sorting.

Given the following index:
{ "first_name": 1, "address.state": -1, "address.city": -1, "ssn": 1}

db.people.find({ "first_name": { $gt: "J" } }).sort({ "address.city": -1 })

No, this query doesn't use equality on the index prefix.
When using an index for filtering and sorting the query must include equality conditions 
on all the prefix keys that precede the sort keys. Moreover, on the sort predicate it skipped 
the next key in the prefix "address.state".

db.people.find({ "first_name": "Jessica" }).sort({ "address.state": 1, "address.city": 1 })

Yes, this query matches with equality on the query predicate with an index prefix, 
and continues the prefix in the sort predicate by walking the index backward.

db.people.find({ "first_name": "Jessica", "address.state": { $lt: "S"} }).sort({ "address.state": 1 })

Yes, while this query fails to use equality on the "address.state" field of the index prefix, 
it uses the same field for sorting.

db.people.find({ "address.city": "West Cindy" }).sort({ "address.city": -1 })

No, this query does not use an index prefix.

db.people.find({ "address.state": "South Dakota", "first_name": "Jessica" }).sort({ "address.city": -1 })

Yes, this query is able to use the index prefix. The order of the fields in the query predicate
does not matter. Since both address.state and first_name are part of the index prefix, 
this query can utilize the index for the equality condition.

9. In this lab you're going to examine several example queries and determine 
which compound index will best service them.

> db.people.find({
    "address.state": "Nebraska",
    "last_name": /^G/,
    "job": "Police officer"
  })

> db.people.find({
    "job": /^P/,
    "first_name": /^C/,
    "address.state": "Indiana"
  }).sort({ "last_name": 1 })

> db.people.find({
    "address.state": "Connecticut",
    "birthday": {
      "$gte": ISODate("2010-01-01T00:00:00.000Z"),
      "$lt": ISODate("2011-01-01T00:00:00.000Z")
    }
  })
If you had to build one index on the people collection, which of the 
following indexes would best service all 3 queries?

{ "address.state": 1, "last_name": 1, "job": 1 }

Yes, this is the best index. This index matches the first query, can be used for sorting on the second, 
and has an prefix for the 3rd query.

10. true or false?
1) MongoDB's query optimizer is statistically based, where collection heuristics are used to determine which plan wins.

No, MongoDB has an empirical query optimizer where query plans are ran against each other during a trial period.

2) Query plans are cached so that plans do not need to be generated and compared against each other every time a query is executed.

Yes, that is correct.

3) When query plans are generated, for a given query, every index generates at least one query plan.

No, only a subset of the indexes are considered as candidates for planning.

4) If an index can't be used, then there is no query plan for that query.

No, if there aren't any viable indexes for a given query, then a COLLSCAN stage will be the main stage of the query plan.

11. true or false?
For the fastest processing, we should ensure that our indexes fit entirely in RAM
true

Index information does not need to completely allocated in RAM since MongoDB only 
uses the right-end-side to the index b-tree, regardless of the queries that use index.
false

Indexes are not required to be entirely placed in RAM, 
however performance will be affected by constant disk access to retrieve index information.
true

12. Which of the following conditions apply when creating indexes on secondaries?
A secondary should never be allowed to become primary
True! If we were to allow it to become primary our application will experience the different set of indexes, 
once it becomes primary. That will potentially affect your application's expected performance.

These indexes can only be set on secondary nodes
False! The indexes can be set on the primary node, however we avoid doing so to prevent any 
impact on the operational workload, since these only service an analytical workload.

We can create specific indexes on secondaries, even if they are not running in standalone mode
False! No we first need to safely shutdown the secondary, and then restart it in standalone mode 
before we can create an index on it.

13. True or false
An index doesn't become multikey until a document is inserted that has an array value.

This is correct!

Running performance tests from the mongo shell is an acceptable way to benchmark your database.

No, you're performance tests should be as close to your production environment as possible. The mongo shell is designed for administrative tasks and ah-hoc queries, not performance benchmarks. You'd also be running in a single thread, which is unlikely how you'd be operating in production.

You can use the --wiredTigerDirectoryForIndexes option to place your indexes on a different disk than your data.

This is correct!

Indexes can only be traversed forward.

No, indexes can be traversed both forward and backward.

The ideal ratio between nReturned and totalKeysExamined is 1.

This is correct!

14. Given the following indexes:

{ categories: 1, price: 1 }
{ in_stock: 1, price: 1, name: 1 }
The following documents:

{ price: 2.99, name: "Soap", in_stock: true, categories: ['Beauty', 'Personal Care'] }
{ price: 7.99, name: "Knife", in_stock: false, categories: ['Outdoors'] }
And the following queries:

db.products.find({ in_stock: true, price: { $gt: 1, $lt: 5 } }).sort({ name: 1 })
db.products.find({ in_stock: true })
db.products.find({ categories: 'Beauty' }).sort({ price: 1 })
Which of the following is/are true?

Index #1 would provide a sort to query #3.

Yes, that is correct.

Index #2 properly uses the equality, sort, range rule for query #1.

No, if we were to build an index for query #1 using the equality, sort, range rule, then the index would be: { in_stock: 1, name: 1, price: 1 }.

There would be a total of 4 index keys created across all of these documents and indexes.

No, there would be 5 total index keys:

{ categories: 'Beauty', price: 2.99 }
{ categories: 'Personal Care', price: 2.99 }
{ categories: 'Outdoors', price: 7.99 }
{ in_stock: true, price: 2.99, name: 'Soap' }
{ in_stock: false, price: 7.99, name: 'Knife'}
The additional index keys are due to the multikey index on categories.

Index #2 can be used by both query #1 and #2.

Yes, that is correct.

15. Ture of false
The only true statement was:

Creating an ascending index on a monotonically increasing value creates index keys 
on the right-hand side of the index tree.

Let's take a look at why each of the other statements are false:

You can index multiple array fields in a single document with a single compound index.
Multikey indexes allow us to index on array fields, but they do not support indexes 
on multiple array fields on single documents.

Covered queries can sometimes still require some of your documents to be examined.
A query is covered if and only if it can be satisfied using the keys of the index.

Write concern has no impact on write latency.
Different write concerns can certainly impact your write latency. 
Write concerns that only need acknowledgment from a primary are generally 
faster than ones that need acknowledgment from a majority of replica set members.

A collection scan has a logarithmic search time.
No, collection scans have a linear search time.