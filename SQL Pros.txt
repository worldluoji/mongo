1. True or false?
1) It allows us to model one-to-one and one-to-many relationships.

This is correct.
Use a sub-object to model a one-to-one relationship.
Use an array to model a one-to-many or a many-to-many relationship.

2) It is similar to maps in Java and dictionaries in Python.
This is correct.

3) It is identical to JSON.
This is incorrect.
In examples, documents are often represented in JSON, but under the hood, 
MongoDB uses BSON which offers more data types and better performance.
比如JSON中数子numberic类型，但是BSON可以表示float,int,double。

2. Ture or false?
1) Modify two documents within a MongoDB transaction.

This is correct.

Using a transaction in MongoDB will guarantee ACID of all the changes performed in the transaction.


2) Modify a field and array in a single document within a MongoDB transaction.

This is correct.

Using a transaction in MongoDB will guarantee ACID of all the changes performed in the transaction.


3) Modify a field and array in a single document without using a transaction.

This is correct.

ACID is guaranteed at the document level.

If you change many fields in a document, regardless if they are scalar values, sub documents, 
or arrays, all changes will go together in an atomic write.


4) Modify two documents without using a MongoDB transaction.
This is incorrect.
Each document will have its atomic write. However, there is no guarantee that both writes will succeed 
or fail together. Also, a reader may see one change and not the other one if the operation reads 
the database right in between the two writes operations.

https://en.wikipedia.org/wiki/ACID
https://en.wikipedia.org/wiki/Snapshot_isolation
https://www.mongodb.com/presentations/are-transactions-right-for-you-

3. What are the main reasons distributed systems behave differently than single server systems?
Networks are a common point of failure.
This is correct.
Networking connections between individual servers are very reliable these days, 
but they do fail once in a while, and when designing an application that uses many servers. 
You need to guard the application against potential failures.

Network speed is usually fast, but not instantaneous.
This is correct.
When an application depends on a piece of data being written or read from many servers, 
it will likely wait for the slowest link. When the latency of an operation is crucial, 
it is a good idea to locate dependant servers (for example database and application servers) 
close to each other.

More servers equate to more downtime.
This is incorrect.
From a statistical point of view, the more components a system has, the more failures it will experience.
However, in a replicated distributed system, downtime is not directly correlated to failures.
Even if you have more servers, carefully designing the system allows for far less downtime than a single, 
non-replicated, server would experience by ensuring every component is replicated and not a single point of failure.

http://smalldatum.blogspot.com/2020/02/describing-replication.html
https://en.wikipedia.org/wiki/CAP_theorem


4. write concern and read concern
Write concern describes the level of acknowledgment requested from MongoDB for write operations 
to a standalone mongod or to replica sets or to sharded clusters. 
In sharded clusters, mongos instances will pass the write concern on to the shards.
The write concern tells the required durability requested for the write operation.
All write operations in MongoDB must be directed to the Primary.
The operation requires a durability of "majority" is a qualitative aspect of a write operation.
"majority" Requests acknowledgment that write operations have propagated to the calculated majority 
of the data-bearing voting members.
For example, consider a replica set with 3 voting members, Primary-Secondary-Secondary (P-S-S). 
For this replica set, calculated majority is two, and the write must propagate to the primary 
and one secondary to acknowledge the write concern to the client.
https://docs.mongodb.com/manual/reference/write-concern/

The readConcern option allows you to control the consistency and isolation properties of the data 
read from replica sets and replica set shards.
The read concern tells the required durability requested for the read operation.
https://docs.mongodb.com/manual/reference/read-concern/


Read preference describes how MongoDB clients route read operations to the members of a replica set.
By default, an application directs its read operations to the primary member in a replica set 
(i.e. read preference mode "primary"). 
But, clients can specify a read preference to send read operations to secondaries.

Read preference consists of the read preference mode and optionally, a tag set, 
the maxStalenessSeconds option, and the hedged read option. 
Hedged read option is available for MongoDB 4.4+ sharded clusters for reads 
that use non-primary read preference.
https://docs.mongodb.com/manual/core/read-preference/

5. some pricipals for mongodb
1) The document model lets, and encourages, you to keep information that is used together inside one single document.
2) Atomicity, consistency, isolation, and durability (ACID) can be implemented by leveraging the document model, 
which is preferred, or by using MongoDB transactions.
3) Making early decisions and compromises about very large datasets will help make the data more manageable. 
For example, deleting or archiving documents after a given period of time may reduce the resources needed for the project.
4) Using a distributed system, like MongoDB, means that data can be written and read on servers all over the world. 
Carefully planning the location of the servers will improve performance and resilience of the applications.

6. Which are the three phases of our data modeling methodology?
1) Describe the Workload.
This is the first phase of our methodology.
This is the phase in which we describe the read and write operations in order to 
understand which ones are the most important ones when constructing our model.

2) Model the Relationships.
This is the second phase of our methodology.
It is similar to the phase of drawing an Entity-Relationship Diagram for a traditional relational database. 
However, there is a decision between embedding and referencing to make for each relationship.

3) Apply Patterns.
This is the third phase of our methodology.
It is similar to denormalizing a schema for a traditional relational model once performance bottlenecks are observed.
Because MongoDB often deals with very large datasets and more demanding workload, it is part of the methodology. 
In other words, you should not wait after the code is written to apply these transformations.

6. embedding or reference?
当父子文档读写大多数情况都是一起的时候，就用embedding;同理子文档使用频率很低，那么就可以用reference。
另外，如果子文档数据量特别大，已经严重影响了查询性能，就不建议使用embedding.

7. Which of the following are true statements about schema design patterns?
They often are denormalizations or transformations to improve performance.
This is correct.

They are a common language to understand design intents.
This is correct.
Using the names of the common schema design patterns will help you and your team understand each other 
on how you intend to model some documents and relationships.
The suggested patterns to potentially apply to a given use case.

They help normalize the data model.
This is incorrect.
The main goal of the patterns is to make the model perform better or make it easier for the application to use.
It is likely that you have a normalized model before you start applying patterns on the model.

If you stop the modeling phase after the second phase, you will end up with a model that is pretty much normalized.
Applying schema design patterns is likely to denormalize the data, often to have better performance.


8. Which of the following can be validated through schema validation in MongoDB?
Values have the right type for a given field.
This is correct.
This is supported by JSON Schema and also easy to specify in a validator written in MongoDB Query Language (MQL).

Values are within a set of acceptable values for a given field.
This is correct.
This is supported by JSON Schema by using the keyword enum which allows you to list the acceptable values.
There are also additional keywords to support ranges or other ways to list values.

A document has either one of two strict shapes.
This is correct.
There is a construct in JSON Schema called oneOf that let you specify two sub-schemas.
Use this technique for verifying different shapes of documents, including checking a specific shape 
for a document version.

Documents in different collections have referential integrity.
This is incorrect.
Schema validation is done per document. 
There is no syntax to link a document to another document that is related to the document under validation.

9. MQL VS Aggretation
A MQL SELECT statement needs to be interpreted from the inside-out to understand the logic of the query.
MQL uses nested statements for queries.
This contrasts with MongoDB Aggregation Pipelines which are interpreted from 
the top-to-bottom as each stage impacts the following stage.
MongoDB Aggregations use sequential stages for queries.


10. SQL VS MongoDB Aggregation
SQL         MongoDB Aggregation
SELECT	    db.aggregate()
WHERE	    $match
GROUP	    $group
COUNT	    $count
LIMIT	    $limit
ORDER BY	$sort
JOIN	    $lookup
UNION ALL	$unionWith

11. SQL VS MQL
SQL         MongoDB Aggregation Framework
SELECT	    db.find()
WHERE	    { Field: Value }
COUNT	    count()
LIMIT, TOP	limit()
ORDER BY	sort()

12. MongoDB相对RDBMS的优势
1) A faulty Primary will be replaced by a new Primary by an automatic election.

Elections of a new Primary node are automatic in MongoDB.

There is no need for any administrative action.


2) Failed write operations are retried automatically once by the MongoDB drivers.

Retryable writes are one of the great features of MongoDB.

Retryable writes can overcome most temporary hiccups in the cluster and the network.

From a maintenance point of view, they help do a smooth transition from one Primary node to a new Primary node.

13. Which of the following help achieve a no-downtime schema migration with MongoDB?
The polymorphism aspect of having documents with different shapes within a collection.
This is correct.
Because documents in the same collection can have different shapes,
we can have documents with the original schema and documents with the new schema.
Instead of seeing the migration as an atomic operation, 
it becomes a continuous process throughout the migration.


Each document can carry its schema version number.
This is correct.
Using a schema version to identify the shape of the document is optional. 
The alternative is to deduce the version of the schema by the differences in the fields.
Both approaches highlight the fact that each document must respect one of the schema versions for our collection.


Database replication allows us to update one node at the time.
This is incorrect.
Database replication allows data synchronization across the different replica members.
Database replication is not used for changing the schema of the documents.