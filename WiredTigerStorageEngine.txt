Starting in MongoDB 3.2, the WiredTiger storage engine is the default storage engine. 
For existing deployments, if you do not specify the --storageEngine or the storage.engine setting, 
the version 3.2+ mongod instance can automatically determine the storage engine 
used to create the data files in the --dbpath or storage.dbPath.

Document Level Concurrency
WiredTiger uses document-level concurrency control for write operations. 
As a result, multiple clients can modify different documents of a collection at the same time.

For most read and write operations, WiredTiger uses optimistic concurrency control. 
WiredTiger uses only intent locks at the global, database and collection levels.
When the storage engine detects conflicts between two operations, 
one will incur a write conflict causing MongoDB to transparently retry that operation.

Some global operations, typically short lived operations involving multiple databases, 
still require a global "instance-wide" lock. Some other operations, such as collMod, 
still require an exclusive database lock.

Snapshots and Checkpoints
WiredTiger uses MultiVersion Concurrency Control (MVCC). At the start of an operation, 
WiredTiger provides a point-in-time snapshot of the data to the operation. 
A snapshot presents a consistent view of the in-memory data.

When writing to disk, WiredTiger writes all the data in a snapshot to disk in a consistent way across all data files. 
The now-durable data act as a checkpoint in the data files. 
The checkpoint ensures that the data files are consistent up to and including the last checkpoint; 
i.e. checkpoints can act as recovery points.

Starting in version 3.6, MongoDB configures WiredTiger to create checkpoints 
(i.e. write the snapshot data to disk) at intervals of 60 seconds. 
In earlier versions, MongoDB sets checkpoints to occur in WiredTiger on user data at an interval 
of 60 seconds or when 2 GB of journal data has been written, whichever occurs first.

During the write of a new checkpoint, the previous checkpoint is still valid. As such, 
even if MongoDB terminates or encounters an error while writing a new checkpoint, upon restart,
MongoDB can recover from the last valid checkpoint.

The new checkpoint becomes accessible and permanent when WiredTiger's metadata table is atomically 
updated to reference the new checkpoint. Once the new checkpoint is accessible, 
WiredTiger frees pages from the old checkpoints.

Starting in MongoDB 5.0, you can use the minSnapshotHistoryWindowInSeconds parameter 
to control how long WiredTiger keeps the snapshot history.

Using WiredTiger, even without journaling, MongoDB can recover from the last checkpoint; 
however, to recover changes made after the last checkpoint, run with journaling.


Journal
WiredTiger uses a write-ahead log (i.e. journal) in combination with checkpoints to ensure data durability.

The WiredTiger journal persists all data modifications between checkpoints. 
If MongoDB exits between checkpoints, it uses the journal to replay all data modified since the last checkpoint. 
For information on the frequency with which MongoDB writes the journal data to disk, see Journaling Process.

WiredTiger journal is compressed using the snappy compression library. 
To specify a different compression algorithm or no compression, 
use the storage.wiredTiger.engineConfig.journalCompressor setting. 
For details on changing the journal compressor, see Change WiredTiger Journal Compressor.

NOTE
If a log record less than or equal to 128 bytes (the mininum log record size for WiredTiger), 
WiredTiger does not compress that record.

参考资料：https://docs.mongodb.com/manual/core/wiredtiger/

