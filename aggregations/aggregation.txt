1. simple first example
db.solarSystem.aggregate([{
  "$match": {
    "atmosphericComposition": { "$in": [/O2/] },
    "meanTemperature": { $gte: -40, "$lte": 40 }
  }
}, {
  "$project": {
    "_id": 0,
    "name": 1,
    "hasMoons": { "$gt": ["$numberOfMoons", 0] }
  }
}], { "allowDiskUse": true});

2. Help MongoDB pick a movie our next movie night! Based on employee polling, 
we've decided that potential movies must meet the following criteria:
imdb.rating is at least 7
genres does not contain "Crime" or "Horror"
rated is either "PG" or "G"
languages contains "English" and "Japanese"

db.movies.aggregate([
  {
    $match: {
      "imdb.rating": { $gte: 7 },
      "genres": { $nin: [ "Crime", "Horror" ] } ,
      "rated": { $in: ["PG", "G" ] },
      "languages": { $all: [ "English", "Japanese" ] }
    }
  }
])

3. project example
// project ``name`` and ``gravity`` fields, including default ``_id``
db.solarSystem.aggregate([{ "$project": { "name": 1, "gravity": 1 } }]);

// using dot-notation to express the projection fields
db.solarSystem.aggregate([{ "$project": { "_id": 0, "name": 1, "gravity.value": 1 } }]);

// reassing ``gravity`` field with value from ``gravity.value`` embeded field
db.solarSystem.aggregate([{"$project": { "_id": 0, "name": 1, "gravity": "$gravity.value" }}]);

// creating a document new field ``surfaceGravity``
db.solarSystem.aggregate([{"$project": { "_id": 0, "name": 1, "surfaceGravity": "$gravity.value" }}]);

// creating a new field ``myWeight`` using expressions
db.solarSystem.aggregate([{"$project": { "_id": 0, "name": 1, "myWeight": { "$multiply": [ { "$divide": [ "$gravity.value", 9.8 ] }, 86 ] } }}]);

project可以使用不止一次，但一般使用一次即可。


4. Using the Aggregation Framework, find a count of the number of movies that have a title composed of one word. 
To clarify, "Cinderella" and "3-25" should count, where as "Cast Away" would not.

db.movies.aggregate([
  {
    $match: {
      title: {
        $type: "string"
      }
    }
  },
  {
    $project: {
      title: { $split: ["$title", " "] },
      _id: 0
    }
  },
  {
    $match: {
      title: { $size: 1 }
    }
  }
]).itcount()

https://docs.mongodb.com/manual/meta/aggregation-quick-reference/#array-expressions
https://docs.mongodb.com/manual/meta/aggregation-quick-reference/#string-expressions

5.There are times when we want to make sure that the field is an array, and that it is not empty. 
We can do this within $match
{ $match: { writers: { $elemMatch: { $exists: true } } }

$elemMatch补充：
给定scores集合中的以下文件：
{ _id: 1, results: [ 82, 85, 88 ] }
{ _id: 2, results: [ 75, 88, 89 ] }
以下查询仅匹配results 数组包含至少一个大于或等于80且小于的元素的那些文档85。
db.scores.find(
   { results: { $elemMatch: { $gte: 80, $lt: 85 } } }
)
该查询返回以下文档，因为该元素82大于或等于80且小于85
{ "_id" : 1, "results" : [ 82, 85, 88 ] }

6. map
$map lets us iterate over an array, element by element, performing some transformation on each element. 
The result of that transformation will be returned in the same place as the original element.

Within $map, the argument to "input" can be any expression as long as it resolves to an array. 
The argument to "as" is the name of the variable we want to use to refer to each element of the array 
when performing whatever logic we want. The field as is optional, and if omitted each element must be referred to as $$this:: 
The argument to "in" is the expression that is applied to each element of the input array, 
referenced with the variable name specified in as, and prepending two dollar signs:

writers: {
  $map: {
    input: "$writers",
    as: "writer",
    in: "$$writer"
  }
}
in is where the work is performed

we use the $arrayElemAt expression, which takes two arguments, 
the array and the index of the element we want. We use the $split expression, 
splitting the values on " (".

If the string did not contain the pattern specified, the only modification is it is wrapped in an array, 
so $arrayElemAt will always work.

writers: {
  $map: {
    input: "$writers",
    as: "writer",
    in: {
      $arrayElemAt: [
        {
          $split: [ "$$writer", " (" ]
        },
        0
      ]
    }
  }
}

7. $setIntersection
Takes two or more arrays and returns an array that contains the elements that appear in every input array.

$setIntersection has the following syntax:

{ $setIntersection: [ <array1>, <array2>, ... ] }

The arguments can be any valid expression as long as they each resolve to an array. 
For more information on expressions, see Expressions.

example:
db.experiments.aggregate(
  [
    { $project: { A: 1, B: 1, commonToBoth: { $setIntersection: [ "$A", "$B" ] }, _id: 0 } }
  ]
)

8. Let's find how many movies in our movies collection are a "labor of love", 
where the same person appears in cast, directors, and writers

db.movies.aggregate([
  {
    $match: {
      cast: { $elemMatch: { $exists: true } },
      directors: { $elemMatch: { $exists: true } },
      writers: { $elemMatch: { $exists: true } }
    }
  },
  {
    $project: {
      _id: 0,
      cast: 1,
      directors: 1,
      writers: {
        $map: {
          input: "$writers",
          as: "writer",
          in: {
            $arrayElemAt: [
              {
                $split: ["$$writer", " ("]
              },
              0
            ]
          }
        }
      }
    }
  },
  {
    $project: {
      labor_of_love: {
        $gt: [
          { $size: { $setIntersection: ["$cast", "$directors", "$writers"] } },
          0
        ]
      }
    }
  },
  {
    $match: { labor_of_love: true }
  },
  {
    $count: "labors of love"
  }
])

9. addFields
1.$project与$addFields都可以向文档中添加指定字段，如果新增字段与现有字段重名，将用新字段覆盖旧有。
2.$addFields只能新增字段，或利用字段值覆盖的方式修改旧有字段，无法对旧有字段进行筛选屏蔽
$project可指定显示某些字段，可以指定屏蔽某些字段（这两种方法不能同时使用），可以屏蔽_id，可以添加或重置现有字段值。

// reassign ``gravity`` field value
db.solarSystem.aggregate([{"$project": { "gravity": "$gravity.value" } }]);

// adding ``name`` and removing ``_id`` from projection
db.solarSystem.aggregate([{"$project": { "_id": 0, "name": 1, "gravity": "$gravity.value" } }])''

// adding more fields to the projected document
db.solarSystem.aggregate([
{"$project":{
    "_id": 0,
    "name": 1,
    "gravity": "$gravity.value",
    "meanTemperature": 1,
    "density": 1,
    "mass": "$mass.value",
    "radius": "$radius.value",
    "sma": "$sma.value" }
}]);

// using ``$addFields`` to generate the new computed field values
db.solarSystem.aggregate([
{"$addFields":{
    "gravity": "$gravity.value",
    "mass": "$mass.value",
    "radius": "$radius.value",
    "sma": "$sma.value"}
}]);

// combining ``$project`` with ``$addFields``
db.solarSystem.aggregate([
{"$project": {
    "_id": 0,
    "name": 1,
    "gravity": 1,
    "mass": 1,
    "radius": 1,
    "sma": 1}
},
{"$addFields": {
    "gravity": "$gravity.value",
    "mass": "$mass.value",
    "radius": "$radius.value",
    "sma": "$sma.value"
}}]);

10. geoNear
The $geoNear operator accepts a document that contains the $geoNear options, 
such as distanceField and maxDistance.

Consider a collection places that has a 2dsphere index. 
The following aggregation uses $geoNear to find documents with a location at most 2 meters 
from the center [ -73.99279 , 40.719296 ] and category equal to Parks.

$geoNear必须放在pipline中的第一个。
db.places.aggregate([
   {
     $geoNear: {
        near: { type: "Point", coordinates: [ -73.99279 , 40.719296 ] },
        distanceField: "dist.calculated",
        maxDistance: 2,
        query: { category: "Parks" },
        includeLocs: "dist.location",
        spherical: true
     }
   }
])

https://docs.mongodb.com/manual/reference/operator/aggregation/geoNear/

11. Cursor-like stages
// project fields ``numberOfMoons`` and ``name``
db.solarSystem.find({}, {"_id": 0, "name": 1, "numberOfMoons": 1}).pretty();

// count the number of documents
db.solarSystem.find({}, {"_id": 0, "name": 1, "numberOfMoons": 1}).count();

// skip documents
db.solarSystem.find({}, {"_id": 0, "name": 1, "numberOfMoons": 1}).skip(5).pretty();

// limit documents
db.solarSystem.find({}, {"_id": 0, "name": 1, "numberOfMoons": 1}).limit(5).pretty();

// sort documents
db.solarSystem.find({}, { "_id": 0, "name": 1, "numberOfMoons": 1 }).sort( {"numberOfMoons": -1 } ).pretty();

// ``$limit`` stage
db.solarSystem.aggregate([{
  "$project": {
    "_id": 0,
    "name": 1,
    "numberOfMoons": 1
  }
},
{ "$limit": 5  }]).pretty();

// ``skip`` stage
db.solarSystem.aggregate([{
  "$project": {
    "_id": 0,
    "name": 1,
    "numberOfMoons": 1
  }
}, {
  "$skip": 1
}]).pretty()

// ``$count`` stage
db.solarSystem.aggregate([{
  "$match": {
    "type": "Terrestrial planet"
  }
}, {
  "$project": {
    "_id": 0,
    "name": 1,
    "numberOfMoons": 1
  }
}, {
  "$count": "terrestrial planets"
}]).pretty();
在返回的结果中"terrestrial planets"就会显示对应的count数量

// removing ``$project`` stage since it does not interfere with our count
db.solarSystem.aggregate([{
  "$match": {
    "type": "Terrestrial planet"
  }
}, {
  "$count": "terrestrial planets"
}]).pretty();


// ``$sort`` stage
db.solarSystem.aggregate([{
  "$project": {
    "_id": 0,
    "name": 1,
    "numberOfMoons": 1
  }
}, {
  "$sort": { "numberOfMoons": -1 }
}]).pretty();

// sorting on more than one field
db.solarSystem.aggregate([{
  "$project": {
    "_id": 0,
    "name": 1,
    "hasMagneticField": 1,
    "numberOfMoons": 1
  }
}, {
  "$sort": { "hasMagneticField": -1, "numberOfMoons": -1 }
}]).pretty();

// setting ``allowDiskUse`` option
db.solarSystem.aggregate([{
  "$project": {
    "_id": 0,
    "name": 1,
    "hasMagneticField": 1,
    "numberOfMoons": 1
  }
}, {
  "$sort": { "hasMagneticField": -1, "numberOfMoons": -1 }
}], { "allowDiskUse": true }).pretty();
sort使用内存不能超过100M，如果超过了，并且没有使用allowDiskUse: true, MongoDB就会报错。

12. $sample
Randomly selects the specified number of documents from the input documents.
{ $sample: { size: <positive integer N> } }

If all of the following conditions are true, $sample uses a pseudo-random cursor to select the N documents:
$sample is the first stage of the pipeline.
N is less than 5% of the total documents in the collection.
The collection contains more than 100 documents.

If any of the previous conditions are false, $sample:
Reads all documents that are output from a preceding aggregation stage or a collection scan.
Performs a random sort to select N documents.

https://docs.mongodb.com/manual/reference/operator/aggregation/sample/?jmp=university


12. two examples
example1:
[
    {
        "$match": {
            "countries": "USA", 
            "tomatoes.viewer.rating": {
                "$gte": 3
            }, 
            "cast": {
                "$elemMatch": {
                    "$exists": true
                }
            }
        }
    }, 
    {
        "$addFields": {
            "num_favs": {
                "$size": {
                    "$setIntersection": [
                        "$cast", 
                        [
                            "Sandra Bullock", 
                            "Tom Hanks", 
                            "Julia Roberts", 
                            "Kevin Spacey", 
                            "George Clooney"
                        ]
                    ]
                }
            }
        }
    }, 
    {
        "$sort": {
            "num_favs": -1, 
            "tomatoes.viewer.rating": -1, 
            "title": -1
        }
    }, 
    {
        "$skip": 24
    }, 
    {
        "$limit": 1
    }
]


example2:
[
  {
    "$match" : {
      "imdb.votes" : {
        "$gte" : 1
      },
      "year" : {
        "$gte" : 1990
      },
      "imdb.rating" : {
        "$gte" : 1
      }
    }
  },
  {
    "$addFields" : {
      "scaled_votes" : {
        "$add" : [
          1,
          {
            "$multiply" : [
              9,
              {
                "$divide" : [
                  {
                    "$subtract" : [
                      "$imdb.votes",
                      5
                    ]
                  },
                  {
                    "$subtract" : [
                      1521105,
                      5
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  {
    "$project" : {
      "_id" : 0,
      "title" : 1,
      "normalized_rating" : {
        "$avg" : [
          "$imdb.rating",
          "$scaled_votes"
        ]
      }
    }
  },
  {
    "$sort" : {
      "normalized_rating" : 1
    }
  },
  {
    "$limit" : 1
  }
]