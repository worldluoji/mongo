1. What is MongoDB?
MongoDB is a NoSQL database that uses documents to store data in an organized way.

2. Why MongoDB is a NoSQL database?
Because it does not utilize tables, rows and columns to organize data.

NoSQL means that the database does not employ tables, rows and columns for data organization, which is true about MongoDB.

Because it uses a structured way to store and access data.
A database implies that there is a structured way to store and organize data.

3. Basic Definations
Document - a way to organize and store data as a set of field-value pairs.
Field - a unique identifier for a datapoint.
Value - data related to a given identifier.
Collection - an organized store of documents in MongoDB, usually with common fields between documents. 
There can be many collections per database and many documents per collection.

Instance - a single machine locally or in the cloud, running a certain software, 
in our case it is the MongoDB database.

Replica Set - a few connected machines that store the same data to ensure that if something 
happens to one of the machines the data will remain intact. 
Comes from the word replicate - to copy something.

Cluster - group of servers that store your data.

4. What is MongoDB Atlas?

They are both MongoDB products. 
This is correct.

Atlas has many tools and services within it that are built specifically for the MongoDB Database.
This is correct.

MongoDB Database has the same functionality as Atlas, but without the friendly user interface.
This is incorrect.
Atlas features go beyond the functionality of organizing and storing data, examples are Charts, 
Realm, Security features and more.

Atlas is a MongoDB service that can work with any database, but in this course it will be used with MongoDB.
This is incorrect.
Atlas is built specifically for the MongoDB database, and can not be used in the same way with other databases.

5. JSON and BSON
BSON is binary JSON
MongoDB stores data in BSON, and you can then view it in JSON.
BSON is faster to parse and lighter to store than JSON.
JSON supports fewer data types than BSON.

6. Importing and Exporting Data
1) export data in BSON
mongodump --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"

2) export data in JSON
mongoexport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --collection=sales --out=sales.json

3) import data in BSON
mongorestore --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"  --drop dump

4) import data in JSON
mongoimport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --drop sales.json

--drop
Modifies the import process so that the target instance drops the collection before 
importing the data from the input.

reference：https://docs.mongodb.com/database-tools/mongoimport/#compatibility

7. common operations
1) connect to a mongodb
mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"
mongo "mongodb+srv://luoji-mongo-cluster.ejuuu.mongodb.net/myFirstDatabase" --username m001-student

2) dbs and collections
show dbs
use sample_training
show collections

删除inspection这个collection
db.inspection.drop()  

Removing all collections in a database also remove the database.

3) query
db.zips.find({"state": "NY"})
db.zips.find({"state": "NY"}).count()
db.zips.find({"state": "NY", "city": "ALBANY"})
db.zips.find({"state": "NY", "city": "ALBANY"}).pretty()
db.inspections.findOne(); // 只查询一条

4）insert
db.inspections.insert({
      "id" : "10021-2015-ENFO",
      "certificate_number" : 9278806,
      "business_name" : "ATLIXCO DELI GROCERY INC.",
      "date" : "Feb 20 2015",
      "result" : "No Violation Issued",
      "sector" : "Cigarette Retail Dealer - 127",
      "address" : {
              "city" : "RIDGEWOOD",
              "zip" : 11385,
              "street" : "MENAHAN ST",
              "number" : 1712
         }
  })

db.inspections.find({"id" : "10021-2015-ENFO", "certificate_number" : 9278806}).pretty()

批量insert:
db.inspections.insert([{ "_id": 1, "test": 1 },{ "_id": 1, "test": 2 },
                       { "_id": 3, "test": 3 }],{ "ordered": false })
ordered默认为true，会按顺序插入，如果遇到错误，后面的也就不会执行了，即_id为3的也不会插入。
ordered为false,则_id为3的也能插入成功。

5) update
updateOne: 只更新匹配的第一条
updateMany: 匹配的全部更新

example1:
Update all documents in the zips collection where the city field is equal to "HUDSON" 
by adding 10 to the current value of the "pop" field.
db.zips.updateMany({ "city": "HUDSON" }, { "$inc": { "pop": 10 } })

example2:
Update a single document in the zips collection where the zip field is equal to "12534" 
by setting the value of the "pop" field to 17630.
db.zips.updateOne({ "zip": "12534" }, { "$set": { "pop": 17630 } })

example3:
update one document in the grades collection where the student_id is ``250`` *, 
and the class_id field is 339 , by adding a document element to the "scores" array:
db.grades.updateOne({ "student_id": 250, "class_id": 339 },
                    { "$push": { "scores": { "type": "extra credit",
                                             "score": 100 }
                                }
                     })
6. delete
deleteOne: 只删除匹配的一条
deleteMany: 匹配的全部删除

8. what is mongo shell?
It is a fully functioning JavaScript interpreter.
This is correct.
mongo shell is a fully functioning JavaScript interpreter, which means that you can create things 
like JavaScript functions and variables in it.

It allows you to interact with your MongoDB instance without using a Graphical User Interface.
This is correct.
There are other means of interacting with the database, such as through the Atlas UI, 
which is more visually supportive than the mongo shell.

mongo shell automatically returns an ordered list of results
This is incorrect.
The mongo shell does not automatically sort results nor does it return data in sorted order by default.
However, you can get a sorted set of documents by using the sort() command which will be discussed later in this course.

9. Document
1) MongoDB adds an _id field to any inserted document if it doesn't have one, 
and it does not utilize other fields for this purpose.

It is automatically generated as an ObjectId type value.

MongoDB generates a value, so that there is one just in case. 
You can definitely change the default value to a different value or data type, 
as long as they are unique to this collection and not an array data type.

_id是Document的唯一标识