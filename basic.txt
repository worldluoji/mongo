1. What is MongoDB?
MongoDB is a NoSQL database that uses documents to store data in an organized way.

2. Why MongoDB is a NoSQL database?
Because it does not utilize tables, rows and columns to organize data.

NoSQL means that the database does not employ tables, rows and columns for data organization, which is true about MongoDB.

Because it uses a structured way to store and access data.
A database implies that there is a structured way to store and organize data.

3. Basic Definations
Document - a way to organize and store data as a set of field-value pairs.
Field - a unique identifier for a datapoint.
Value - data related to a given identifier.
Collection - an organized store of documents in MongoDB, usually with common fields between documents. 
There can be many collections per database and many documents per collection.

Instance - a single machine locally or in the cloud, running a certain software, 
in our case it is the MongoDB database.

Replica Set - a few connected machines that store the same data to ensure that if something 
happens to one of the machines the data will remain intact. 
Comes from the word replicate - to copy something.

Cluster - group of servers that store your data.

4. What is MongoDB Atlas?

They are both MongoDB products. 
This is correct.

Atlas has many tools and services within it that are built specifically for the MongoDB Database.
This is correct.

MongoDB Database has the same functionality as Atlas, but without the friendly user interface.
This is incorrect.
Atlas features go beyond the functionality of organizing and storing data, examples are Charts, 
Realm, Security features and more.

Atlas is a MongoDB service that can work with any database, but in this course it will be used with MongoDB.
This is incorrect.
Atlas is built specifically for the MongoDB database, and can not be used in the same way with other databases.

5. JSON and BSON
BSON is binary JSON
MongoDB stores data in BSON, and you can then view it in JSON.
BSON is faster to parse and lighter to store than JSON.
JSON supports fewer data types than BSON.

6. Importing and Exporting Data
1) export data in BSON
mongodump --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"

2) export data in JSON
mongoexport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --collection=sales --out=sales.json

3) import data in BSON
mongorestore --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"  --drop dump

4) import data in JSON
mongoimport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --drop sales.json

--drop
Modifies the import process so that the target instance drops the collection before 
importing the data from the input.

reference：https://docs.mongodb.com/database-tools/mongoimport/#compatibility

7. common operations
1) connect to a mongodb
使用mongo shell
mongosh "mongodb+srv://luoji-mongo-cluster.ejuuu.mongodb.net/myFirstDatabase" --username m001-student
使用官方命令框终端直接使用mongo即可:
mongo "mongodb+srv://luoji-mongo-cluster.ejuuu.mongodb.net/myFirstDatabase" --username m001-student

2) dbs and collections
show dbs
use sample_training
show collections

删除inspection这个collection
db.inspection.drop()  

Removing all collections in a database also remove the database.

3) query
db.zips.find({"state": "NY"})
db.zips.find({"state": "NY"}).count()
db.zips.find({"state": "NY", "city": "ALBANY"})
db.zips.find({"state": "NY", "city": "ALBANY"}).pretty()
db.inspections.findOne(); // 只查询一条
db.zips.find({pop: {"$lt":1000}}).count() // 查询pop小于1000的

4）insert
db.inspections.insert({
      "id" : "10021-2015-ENFO",
      "certificate_number" : 9278806,
      "business_name" : "ATLIXCO DELI GROCERY INC.",
      "date" : "Feb 20 2015",
      "result" : "No Violation Issued",
      "sector" : "Cigarette Retail Dealer - 127",
      "address" : {
              "city" : "RIDGEWOOD",
              "zip" : 11385,
              "street" : "MENAHAN ST",
              "number" : 1712
         }
  })

db.inspections.find({"id" : "10021-2015-ENFO", "certificate_number" : 9278806}).pretty()

批量insert:
db.inspections.insert([{ "_id": 1, "test": 1 },{ "_id": 1, "test": 2 },
                       { "_id": 3, "test": 3 }],{ "ordered": false })
ordered默认为true，会按顺序插入，如果遇到错误，后面的也就不会执行了，即_id为3的也不会插入。
ordered为false,则_id为3的也能插入成功。

5) update
updateOne: 只更新匹配的第一条
updateMany: 匹配的全部更新

example1:
Update all documents in the zips collection where the city field is equal to "HUDSON" 
by adding 10 to the current value of the "pop" field.
db.zips.updateMany({ "city": "HUDSON" }, { "$inc": { "pop": 10 } })

example2:
Update a single document in the zips collection where the zip field is equal to "12534" 
by setting the value of the "pop" field to 17630.
db.zips.updateOne({ "zip": "12534" }, { "$set": { "pop": 17630 } })

example3:
update one document in the grades collection where the student_id is ``250`` *, 
and the class_id field is 339 , by adding a document element to the "scores" array:
db.grades.updateOne({ "student_id": 250, "class_id": 339 },
                    { "$push": { "scores": { "type": "extra credit",
                                             "score": 100 }
                                }
                     })
6. delete
deleteOne: 只删除匹配的一条
deleteMany: 匹配的全部删除

8. what is mongo shell?
It is a fully functioning JavaScript interpreter.
This is correct.
mongo shell is a fully functioning JavaScript interpreter, which means that you can create things 
like JavaScript functions and variables in it.

It allows you to interact with your MongoDB instance without using a Graphical User Interface.
This is correct.
There are other means of interacting with the database, such as through the Atlas UI, 
which is more visually supportive than the mongo shell.

mongo shell automatically returns an ordered list of results
This is incorrect.
The mongo shell does not automatically sort results nor does it return data in sorted order by default.
However, you can get a sorted set of documents by using the sort() command which will be discussed later in this course.

9. Document
1) MongoDB adds an _id field to any inserted document if it doesn't have one, 
and it does not utilize other fields for this purpose.

It is automatically generated as an ObjectId type value.

MongoDB generates a value, so that there is one just in case. 
You can definitely change the default value to a different value or data type, 
as long as they are unique to this collection and not an array data type.

_id是Document的唯一标识

10. logic operator
db.routes.find({ "$and": [ { "$or" :[ { "dst_airport": "KZN" },
                                    { "src_airport": "KZN" }
                                  ] },
                          { "$or" :[ { "airplane": "CR2" },
                                     { "airplane": "A81" } ] }
                         ]}).pretty()

默认就是and,比如
db.routes.find({ "dst_airport": "KZN",  "src_airport": "KZN"},
则两个条件都要满足.
像上面的第一个语句$or使用了不只一次，就显示指定$and

$nor 即是 $or取非，意为都不满足的
{"$nor": [{statement1},{statement2}...]}

$not和$nor、$or、$and用法不同：
{"$not": {statement}}
$not only negates a logical expression, 后面statement必须是一个logic表达式,例如:
db.inventory.find( { price: { $not: { $gt: 1.99 } } } )


11. $expr
$expr also allows us to use variables and conditional statements.
It's expressive, meaning it can do more than one simple operation.
It allows the use of aggregation expressions within the query language, and it uses this syntax.

Find all documents where the trip started and ended at the same station:
db.trips.find({ "$expr": { "$eq": [ "$end station id", "$start station id"] }
              }).count()
the $start station ID means the value 439

Find all documents where the trip lasted longer than 1200 seconds, and started and ended at the same station:
db.trips.find({ "$expr": { "$and": [ { "$gt": [ "$tripduration", 1200 ]},
                         { "$eq": [ "$end station id", "$start station id" ]}
                       ]}}).count()

12. array operator
The correct functionality of the $push operator is that when the field is not an array, 
the operation will fail. However, if the field is absent in the document to update, 
$push adds the array field with the value as its element.

The $push operator add a value into an array;
The second functionality of the $push operator is that when the field is not an array, 
the operation will fail. However, if the field is absent in the document to update, 
$push adds the array field with the value as its element.

The "$size" array operator will return all documents where the specified array field is exactly the given length.

The "$all" array operator will return a cursor with all documents in which the specified array field contains all the given elements, regardless of their order in the array.

When querying an array field with an array match, MongoDB will look for an exact array match, unless specified otherwise.

When querying an array field with a single element, MongoDB will return all documents where the specified array field contains this given element.

db.listingsAndReviews.find({ "amenities": {
  "$size": 20,
  "$all": [ "Internet", "Wifi",  "Kitchen",
           "Heating", "Family/kid friendly",
           "Washer", "Dryer", "Essentials",
           "Shampoo", "Hangers",
           "Hair dryer", "Iron",
           "Laptop friendly workspace" ]
         }
}).pretty()

13. array projection
语法：db.collectionName.find({queryStatement},{projection})

Switch to this database:
use sample_airbnb

Find all documents with exactly 20 amenities which include all the amenities listed in the query array, 
and display their price and address:
db.listingsAndReviews.find({ "amenities":
        { "$size": 20, "$all": [ "Internet", "Wifi",  "Kitchen", "Heating",
                                 "Family/kid friendly", "Washer", "Dryer",
                                 "Essentials", "Shampoo", "Hangers",
                                 "Hair dryer", "Iron",
                                 "Laptop friendly workspace" ] } },
                            {"price": 1, "address": 1}).pretty()

Find all documents that have Wifi as one of the amenities
only include price and address in the resulting cursor:
db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1, "_id": 0 }).pretty()

Find all documents that have Wifi as one of the amenities only include price and address 
in the resulting cursor, also exclude ``"maximum_nights"``. **This will be an error:*
db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1,
                             "_id": 0, "maximum_nights":0 }).pretty()

Cannot do exclusion on-field maximum_nights in inclusion projection
which means that it cannot exclude maximum_nights in the inclusion projection i.e., 
you cannot have a mix of inclusion and exclusion projection (except for _id).


Switch to this database:
use sample_training

Find all documents where the student in class 431 received a grade higher than 85 for any type of assignment:
db.grades.find({ "class_id": 431 },
               { "scores": { "$elemMatch": { "score": { "$gt": 85 } } }
             }).pretty()

Find all documents where the student had an extra credit score:
db.grades.find({ "scores": { "$elemMatch": { "type": "extra credit" } }
               }).pretty()
scores这个数组里，只要有一个元素的type字段为"extra credit"则可以匹配。这里数据里的一个元素是一个对象{...}

14. sub document
use sample_training

relationships: [
  {
    is_past: false,
    title: 'Co-Founder and VP, Social and Audience Development',
    person: {
      first_name: 'Michael',
      last_name: 'Howell',
      permalink: 'michael-howell'
    }
  },
  .......

db.companies.find({ "relationships.0.person.last_name": "Zuckerberg" },
                  { "name": 1 }).pretty()

relationships数组的第一个元素的first_name为Mark的：
db.companies.find({ "relationships.0.person.first_name": "Mark",
                    "relationships.0.title": { "$regex": "CEO" } },
                  { "name": 1 }).count()

$regex使用正则表达式
db.companies.find({ "relationships.0.person.first_name": "Mark",
                    "relationships.0.title": {"$regex": "CEO" } },
                  { "name": 1 }).pretty()

db.companies.find({ "relationships":
                      { "$elemMatch": { "is_past": true,
                                        "person.first_name": "Mark" } } },
                  { "name": 1 }).pretty()

db.companies.find({ "relationships":
                      { "$elemMatch": { "is_past": true,
                                        "person.first_name": "Mark" } } },
                  { "name": 1 }).count()

15. aggregation framework
The aggregation framework, in its simplest form, is just another way to query data in MongoDB.
With the aggregation framework, we can compute and reshape data.

use sample_airbnb

1) $project、$group、$sum
find all documents that have Wifi as one of the amenities. Only include price and address in the resulting cursor.
db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1, "_id": 0 }).pretty()

Using the aggregation framework find all documents that have Wifi as one of the amenities``*. Only include* ``price and address in the resulting cursor.
db.listingsAndReviews.aggregate([
                                  { "$match": { "amenities": "Wifi" } },
                                  { "$project": { "price": 1,
                                                  "address": 1,
                                                  "_id": 0 }}]).pretty()
使用aggregate就像是一个pipline, $match是第一个filter,$project是第二个filter。注意aggregate里面使用"[]"包含
各个filter.

Find one document in the collection and only include the address field in the resulting cursor.
db.listingsAndReviews.findOne({ },{ "address": 1, "_id": 0 })

Project only the address field value for each document, then group all documents into one document per address.
country value.
db.listingsAndReviews.aggregate([ { "$project": { "address": 1, "_id": 0 }},
                                  { "$group": { "_id": "$address.country" }}])

Project only the address field value for each document, then group all documents into one document per address.
country value, and count one for each document in each group.
db.listingsAndReviews.aggregate([
                                  { "$project": { "address": 1, "_id": 0 }},
                                  { "$group": { "_id": "$address.country",
                                                "count": { "$sum": 1 } } }
                                ])

2) sort and limit

use sample_training

db.zips.find().sort({ "pop": 1 }).limit(1)
1表示升序，0表示降序

db.zips.find({ "pop": 0 }).count()

db.zips.find().sort({ "pop": -1 }).limit(1)

db.zips.find().sort({ "pop": -1 }).limit(10)

db.zips.find().sort({ "pop": 1, "city": -1 })

The caveat with limit() is that if you use limit() without sort(), you will most likely get some results without any guarantee of its order.
Similarly, if you use limit() before you sort(), you might miss some of the data that you meant to sort and include in the results set.
Which is why MongoDB assumes that when you use sort() and limit(), you always mean to sort first, regardless of the order in which you type these.

We already know other cursor methods, like pretty() and count(), so these two are an addition to our knowledge base.
A cursor method is not applied to the data that is stored in the database.
It is instead applied to the results set that lives in the cursor.
After the cursor is populated with the filter data that's the result of the Find command, 
we can then apply the sort() method, which will sort the data based on the criteria that we provided.
不管sort还是limit在前面，sort都会先执行，再执行limit