When talking about performance, we cannot forget about the actual hardware configuration that will support our database and application deployments.

A full disclosure of how to tune and size your hardware needs, for a given deployment, are out of scope for this course.

But let's just do a quick pass on the hardware and configuration of our system, and why it becomes an essential consideration for the overall performance of your deployments.

MongoDB is a high performance database.

But to operate correctly, while supporting your applications, requires adequate hardware provisioning.

Let's review which hardware resources and configurations we have available.

And how MongoDB uses those computational resources.

A computer or server can be represented in its essence by the Von Neumann architecture.

Where we are going to have a CPU for processing and calculations.

Memory for execution.

Disk and IO-- although you may consider Disk as another type of IO.

For persistency and communications between servers, or even within our host processes.

These are the main resources that MongoDB relies on to operate adequately.

In MongoDB deployments, as in many other modern databases, memory is a quintessential resource.

Over the past few years, the availability of RAM and the fall of its production costs contributed for the development of databases' architectures.

That privileged the users of this fast and performant resource.

The fact that RAM or memory is 25 times faster than common SSDs also makes this transition of Disk oriented into RAM oriented a nice, strong appealing factor for databases to be designed around usage of memory.

As a result of this, MongoDB has storage engines that are either very dependent on RAM, or even completely in memory [?

execution ?] modes for its data management operations.

A significant number of operations rely heavily in RAM.

Like the aggregation pipeline operations, the index traversing.

Writes are first performed in RAM allocated pages.

The query engine requires RAM to retrieve the quarter results.

And finally, connections are handling memory.

Roughly, one megabyte per established connection.

And therefore they require memory space.

It is safe to say that the more RAM you have available, the more performance your department of MongoDB will tend to be.

CPU is used by all applications for computational processing.

Databases are just another category of applications.

MongoDB is no different.

But the utilization of this resource is generally more attached with two main factors.

Storage engines that we are using, and the concurrency level that your MongoDB instance will be subjected to.

By default, MongoDB will try to use all available CPU cores to respond to incoming requests.

Our non-locking concurrency control mechanism, using wired tag or storage engine, rely heavily in the CPU to process these requests.

This means that if we have non-blocking operations, like writing different documents concurrently or responding to an incoming query requests like Reads, MongoDB will perform better the more CPU resources we have available.

Also, there are certain operations, like page compression, data calculation operations, aggregation framework operations, and map reduce, amongst others that will require the availability of CPU cycles.




But do not forget that not all writes and read operations are non-locking operations.

Writing constantly to the same document, for example, and in similar place updates will require each write to block all other writes on that same document to comply.

In situations such as this, multiple CPU's do not help performance.

Because the threads can not do their work in parallel.

Since always the same document will be affected by the same write.

As you probably already noticed, MongoDB is a database.

And one of the things expected from databases is their ability to persist information written.

Genius we may say.

For persisting data, MongoDB will use disks.

The IOPS, which stands for input output operations per second, that your server DISK provides, the faster we can write and read data.

And the faster your persistency layer will respond to database and application requests.

The types of disks will greatly affect the overall performance of your MongoDB deployment.

If we compare the different types of disks.

HDDs, SSDs, EBS, volumes, in terms of random access latency and IOPS, we can immediately tell that there is going to be a big difference between what one can expect, in terms of performance, given the different types of disks that we might be using.

This can be used in different architectures.

More specifically, we can use RAID architectures in our servers for redundancy of read and write operations.

MongoDB will benefit from some but not all RAID architectures.

The recommended RAID architecture for MongoDB deployments is RAID 10, or RAID 1- 0.

This architecture is the one that offers more redundancy and safeguards guarantees with a good performance combination.

On the other hand, we highly discourage deployments that use RAID 5, or even RAID 6.

Since these do not typically provide sufficient performance to MongoDB deployments.

We also recommend avoiding RAID 0.

Because while providing good write performance, it provides very limited availability.

It can lead to reduced performance on read operations.

Britain is a disk architecture that provides both redundancy of segments across physical drives.

But also allows extended performance, since it last penalization of multiple writes, reads, and reads and writes.

In the same disk allocated segments.

Which is quite awesome for a database like MongoDB.

A particularly important aspect of MongoDB is the ability to use several different disks.

That might be available in your servers.

This will allow to distributing IO load of different databases, indexes, journaling, and other files like lock files.

Which allow you to optimize your MongoDB overall performance.

MongoDB deployments also rely on network hardware.

Applications will reach the database by establishing connections to the hosts, where MongoDB instance is running.

The faster and the larger the bandwidth is for your network, the better performance you will experience.

But this is not the end of the story regarding network utilization with MongoDB.

MongoDB is a distributed database for high availability.

Rapid [INAUDIBLE] clusters do the high availability part.

But also for horizontal scaling, where the shard and cluster in all its different components, allows you to get a horizontal distribution of your data.

The way that your different hosts that hold the different nodes of your cluster are connected, can affect the overall performance of your system.

Also, the types of network switches, load balancers, firewalls, and how far apart the cluster nodes are-- either by being distributed across different data centers or regions.

The type of connections between data centers, especially latency-- we haven't cracked going faster than the speed of light yet-- will play a great deal in the performance experienced by your application.

This aligned with the write concern, read concern, and read preference that your application can set while emitting commands or doing requests to the server, needs to be taken into consideration when analyzing the performance of your application.


备注：
RAID （ Redundant Array of Independent Disks ）即独立磁盘冗余阵列，简称为「磁盘阵列」，
其实就是用多个独立的磁盘组成在一起形成一个大的磁盘系统，从而实现比单块磁盘更好的存储性能和更高的可靠性。